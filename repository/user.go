package repository

import (
	"documentation/entity"

	"gorm.io/gorm"
)

type UserRepository interface {
	SaveUser(user entity.User) (entity.User, error)
	UpdateUser(user entity.User) (entity.User, error)
	FindByIDUser(ID int) (entity.User, error)
	FindAllUser() ([]entity.User, error)
	DeleteByIDUser(ID int) (entity.User, error)
	FindByUsername(username string) (entity.User, error)
}

type userRepository struct {
	db *gorm.DB
}

func (r *userRepository) FindByUsername(username string) (entity.User, error) {
	var user entity.User
	err := r.db.Where("username = ?", username).Find(&user).Error

	if err != nil {
		return user, err
	}

	return user, nil
}

func NewUserRepository(db *gorm.DB) *userRepository {
	return &userRepository{db}
}

func (r *userRepository) SaveUser(user entity.User) (entity.User, error) {
	err := r.db.Create(&user).Error
	if err != nil {
		return user, err
	}
	return user, nil

}
func (r *userRepository) FindByIDUser(ID int) (entity.User, error) {
	var user entity.User
	err := r.db.Where("id = ? ", ID).Find(&user).Error
	if err != nil {
		return user, err
	}
	return user, nil

}
func (r *userRepository) UpdateUser(user entity.User) (entity.User, error) {
	err := r.db.Save(&user).Error
	if err != nil {
		return user, err
	}
	return user, nil

}
func (r *userRepository) FindAllUser() ([]entity.User, error) {
	var users []entity.User
	err := r.db.Find(&users).Error
	if err != nil {
		return users, err
	}
	return users, nil

}
func (r *userRepository) DeleteByIDUser(ID int) (entity.User, error) {
	var user entity.User
	err := r.db.Where("id = ? ", ID).Delete(&user).Error
	if err != nil {
		return user, err
	}
	return user, nil

}

//Generated by Micagen at 25 Mei 2022
