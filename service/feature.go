package service

import (
	"documentation/entity"
	"documentation/input"
	"documentation/repository"
)

type FeatureService interface {
	FeatureServiceGetAll() ([]entity.Feature, error)
	FeatureServiceGetByID(inputID input.InputIDFeature) (entity.Feature, error)
	FeatureServiceCreate(input input.FeatureInput) (entity.Feature, error)
	FeatureServiceUpdate(inputID input.InputIDFeature, inputData input.FeatureInput) (entity.Feature, error)
	FeatureServiceDeleteByID(inputID input.InputIDFeature) (bool, error)
	FindAll(search string, page int, size int) ([]entity.Feature, error)
	TotalFetchData(search string, page int, size int) (int, error)
}
type featureService struct {
	repository repository.FeatureRepository
}

func NewFeatureService(repository repository.FeatureRepository) *featureService {
	return &featureService{repository}
}
func (s *featureService) FeatureServiceCreate(input input.FeatureInput) (entity.Feature, error) {
	feature := entity.Feature{}
	feature.FeatureName = input.FeatureName
	feature.FeatureDescription = input.FeatureDescription
	newFeature, err := s.repository.SaveFeature(feature)
	if err != nil {
		return newFeature, err
	}
	return newFeature, nil
}
func (s *featureService) FeatureServiceUpdate(inputID input.InputIDFeature, inputData input.FeatureInput) (entity.Feature, error) {
	feature, err := s.repository.FindByIDFeature(inputID.ID)
	if err != nil {
		return feature, err
	}
	feature.FeatureName = inputData.FeatureName
	feature.FeatureDescription = inputData.FeatureDescription

	updatedFeature, err := s.repository.UpdateFeature(feature)

	if err != nil {
		return updatedFeature, err
	}
	return updatedFeature, nil
}
func (s *featureService) FeatureServiceGetByID(inputID input.InputIDFeature) (entity.Feature, error) {
	feature, err := s.repository.FindByIDFeature(inputID.ID)
	if err != nil {
		return feature, err
	}
	return feature, nil
}
func (s *featureService) FeatureServiceGetAll() ([]entity.Feature, error) {
	features, err := s.repository.FindAllFeature()
	if err != nil {
		return features, err
	}
	return features, nil
}
func (s *featureService) FeatureServiceDeleteByID(inputID input.InputIDFeature) (bool, error) {
	_, err := s.repository.FindByIDFeature(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDFeature(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (s *featureService) FindAll(search string, page int, size int) ([]entity.Feature, error) {
	features, err := s.repository.FindAll(search, page, size)
	if err != nil {
		return features, err
	}
	return features, nil
}

func (s *featureService) TotalFetchData(search string, page int, size int) (int, error) {
	totalData, err := s.repository.TotalFetchData(search, page, size)
	if err != nil {
		return totalData, err
	}
	return totalData, nil
}

//Generated by Micagen at 25 Mei 2022
