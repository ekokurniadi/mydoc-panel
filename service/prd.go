package service

import (
	"documentation/entity"
	"documentation/input"
	"documentation/repository"
)

type PrdService interface {
	PrdServiceGetAll() ([]entity.Prd, error)
	PrdServiceGetByID(inputID input.InputIDPrd) (entity.Prd, error)
	PrdServiceCreate(input input.PrdInput) (entity.Prd, error)
	PrdServiceUpdate(inputID input.InputIDPrd, inputData input.PrdInput) (entity.Prd, error)
	PrdServiceDeleteByID(inputID input.InputIDPrd) (bool, error)
	FindAll(search string, page int, size int) ([]entity.Prd, error)
	TotalFetchData(search string, page int, size int) (int, error)
}
type prdService struct {
	repository repository.PrdRepository
}

func NewPrdService(repository repository.PrdRepository) *prdService {
	return &prdService{repository}
}
func (s *prdService) PrdServiceCreate(input input.PrdInput) (entity.Prd, error) {
	prd := entity.Prd{}
	prd.DocumentName = input.DocumentName
	prd.Description = input.Description
	prd.Link = input.Link
	newPrd, err := s.repository.SavePrd(prd)
	if err != nil {
		return newPrd, err
	}
	return newPrd, nil
}
func (s *prdService) PrdServiceUpdate(inputID input.InputIDPrd, inputData input.PrdInput) (entity.Prd, error) {
	prd, err := s.repository.FindByIDPrd(inputID.ID)
	if err != nil {
		return prd, err
	}
	prd.DocumentName = inputData.DocumentName
	prd.Description = inputData.Description
	prd.Link = inputData.Link

	updatedPrd, err := s.repository.UpdatePrd(prd)

	if err != nil {
		return updatedPrd, err
	}
	return updatedPrd, nil
}
func (s *prdService) PrdServiceGetByID(inputID input.InputIDPrd) (entity.Prd, error) {
	prd, err := s.repository.FindByIDPrd(inputID.ID)
	if err != nil {
		return prd, err
	}
	return prd, nil
}
func (s *prdService) PrdServiceGetAll() ([]entity.Prd, error) {
	prds, err := s.repository.FindAllPrd()
	if err != nil {
		return prds, err
	}
	return prds, nil
}
func (s *prdService) PrdServiceDeleteByID(inputID input.InputIDPrd) (bool, error) {
	_, err := s.repository.FindByIDPrd(inputID.ID)
	if err != nil {
		return false, err
	}
	_, err = s.repository.DeleteByIDPrd(inputID.ID)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (s *prdService) FindAll(search string, page int, size int) ([]entity.Prd, error) {
	features, err := s.repository.FindAll(search, page, size)
	if err != nil {
		return features, err
	}
	return features, nil
}

func (s *prdService) TotalFetchData(search string, page int, size int) (int, error) {
	totalData, err := s.repository.TotalFetchData(search, page, size)
	if err != nil {
		return totalData, err
	}
	return totalData, nil
}

//Generated by Micagen at 25 Mei 2022
